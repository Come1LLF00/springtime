{"remainingRequest":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\src\\components\\basic.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\src\\components\\basic.vue","mtime":1606825984591},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["basic.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div id=\"basic\">\r\n    <div id=\"container\">\r\n      <div id=\"form-container\">\r\n        <h4 class=\"text__title\">Форма</h4>\r\n        <form id=\"result\">\r\n          <fieldset ref=\"x\" title=\"Значение параметра x должно быть целым числом в пределах -4 до 4\">\r\n            <label>x</label>\r\n            <select v-model=\"result.x\" required=\"true\">\r\n              <option v-for=\"value in xValues\" >{{ value }}</option>\r\n            </select>\r\n          </fieldset>\r\n          <fieldset ref=\"y\" title=\"Значение параметра y должно быть действительным число в интервале от -5 до 5\">\r\n            <label>y</label>\r\n            <input type=\"text\" placeholder=\"y in (-5, 5)\" v-model=\"result.y\" required=\"true\" />\r\n          </fieldset>\r\n          <fieldset ref=\"r\" title=\"Значение параметра r должно быть целым числом в пределах от 1 до 4\">\r\n            <label>r</label>\r\n            <select v-model=\"result.r\" required=\"true\">\r\n              <option v-for=\"value in xValues\">{{ value }}</option>\r\n            </select>\r\n          </fieldset>\r\n          <fieldset class=\"separated\">\r\n            <button @click.prevent=\"check\" class=\"btn\">проверить</button>\r\n          </fieldset>\r\n        </form>\r\n\r\n      </div>\r\n      <div id=\"area-container\">\r\n        <h4 class=\"text__title\">Рабочая область</h4>\r\n        <canvas id=\"area\" ref=\"area\" width=\"643\" height=\"643\" @click=\"checkArea\">\r\n          Canvas not supported\r\n        </canvas>\r\n      </div>\r\n    </div>\r\n    <loader v-if=\"isLoading\" /><resultscontainer v-bind:results=\"results\" v-else-if=\"results.length\" />\r\n    <p class=\"empty-results\" v-else>результаты отсутствуют</p><div id=\"close-container\">\r\n      <button @click=\"signout\" class=\"btn\">закрыть сессию</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import resultscontainer from '@/components/temp_base/results_container'\r\n  import loader from '@/components/temp_base/loader'\r\n\r\n  const baseValues = ['1', '2', '3', '4'];\r\n  const maxRadius = Math.max(...baseValues);\r\n  const part = 0.45;\r\n\r\n  export default {\r\n    name: 'basic',\r\n    props: ['accessToken', 'refreshToken', ],\r\n    components: {\r\n      resultscontainer,\r\n      loader,\r\n    },\r\n\r\n    data: function() {\r\n      return {\r\n        rValues: baseValues,\r\n        xValues: ['-4', '-3', '-2', '-1', '0'].concat(baseValues),\r\n        yMinimal: '-5',\r\n        yMaximum: '5',\r\n        result: { x: '', y: '', r: '', },\r\n        results: [],\r\n        isLoading: true\r\n      };\r\n    },\r\n    computed: {\r\n      radius: function() {\r\n        return this.result.r;\r\n      },\r\n    },\r\n    watch: {\r\n      radius: function(value) {\r\n        this.redraw(value);\r\n      },\r\n      results: function(value) {\r\n        this.drawDots(value);\r\n      }\r\n    },\r\n    methods: {\r\n      translateTo: function(realCoordinate, fieldSize, length, proportion) {\r\n        return length * (realCoordinate - fieldSize / 2) / (fieldSize * proportion);\r\n      },\r\n      translateFrom: function(imagCoordinate, fieldSize, length, proportion) {\r\n        return fieldSize * (imagCoordinate * proportion / length + 0.5);\r\n      },\r\n\r\n      drawRectangle(ctx, x, y, radius) {\r\n        ctx.fillRect(x - radius, y, radius, radius / 2);\r\n      },\r\n\r\n      drawTriangle(ctx, x, y, radius) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x, y - radius);\r\n        ctx.lineTo(x + radius / 2, y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.fill();\r\n      },\r\n\r\n      drawQuadrant(ctx, x, y, radius) {\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius / 2, 0, Math.PI / 2, false);\r\n        ctx.lineTo(x, y);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.fill();\r\n      },\r\n\r\n      drawArea: function(canvas, ctx, x, y, radius) {\r\n        ctx.strokeStyle = '#3399FF';\r\n        ctx.fillStyle = '#3399FF';\r\n        console.log(`canvas: ${ canvas }, ctx: ${ ctx }, x: ${ x }, y: ${ y }, radius: ${ radius }`);\r\n        console.log('drawing rectangle');\r\n        this.drawRectangle(ctx, x, y, radius);\r\n        console.log('drawing triangle');\r\n        this.drawTriangle(ctx, x, y, radius);\r\n        console.log('drawing quadrant');\r\n        this.drawQuadrant(ctx, x, y, radius);\r\n      },\r\n\r\n      drawVerticalLine: function(ctx, x, y, length) {\r\n        ctx.fillRect(x, y, 2, length);\r\n      },\r\n\r\n      drawHorizontalLine: function(ctx, x, y, length) {\r\n        ctx.fillRect(x, y, length, 2);\r\n      },\r\n\r\n      drawLines: function(ctx, x, y, length) {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.fillStyle = '#000000';\r\n        console.log('draw horizontal line');\r\n        this.drawHorizontalLine(ctx, 0, y, length);\r\n        console.log('draw vertical line');\r\n        this.drawVerticalLine(ctx, x, 0, length);\r\n      },\r\n      drawHorizontalArrow: function(ctx, x, y, length) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x - length, y - length / 2);\r\n        ctx.lineTo(x - length, y + length / 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.stroke();\r\n      },\r\n\r\n      drawSignedHorizontalArrow: function(ctx, x, y, length, text) {\r\n        ctx.fillText(text, x - length, y - length);\r\n        this.drawHorizontalArrow(ctx, x, y, length);\r\n      },\r\n\r\n      drawVerticalArrow: function(ctx, x, y, length) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x - length / 2, y + length);\r\n        ctx.lineTo(x + length / 2, y + length);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.stroke();\r\n      },\r\n\r\n      drawSignedVerticalArrow: function(ctx, x, y, length, text) {\r\n        ctx.fillText(text, x + length, y + length);\r\n        this.drawVerticalArrow(ctx, x, y, length);\r\n      },\r\n\r\n      drawArrows: function(ctx, x, y, length) {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.fillStyle = '#000000';\r\n        console.log('drawing horizontal arrow');\r\n        this.drawHorizontalArrow(ctx, x, 0, length);\r\n        console.log('drawing vertical arrow');\r\n        this.drawVerticalArrow(ctx, 2 * x, y, length);\r\n      },\r\n      drawSignedArrows: function(ctx, x, y, length) {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.fillStyle = '#000000';\r\n        console.log('drawing signed horizontal arrow');\r\n        this.drawSignedHorizontalArrow(ctx, 2 * x, y, length, 'y');\r\n        console.log('drawing signed vertical arrow');\r\n        this.drawSignedVerticalArrow(ctx, x, 0, length, 'x');\r\n      },\r\n\r\n      drawSignedHorizontalNotch: function(ctx, x, y, length, text) {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.fillStyle = '#000000';\r\n        ctx.fillText(text, x + length, y + length / 2);\r\n        this.drawHorizontalLine(ctx, x - length / 2, y, length);\r\n      },\r\n      drawSignedVerticalNotch: function(ctx, x, y, length, text) {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.fillStyle = '#000000';\r\n        ctx.fillText(text, x - length, y - length);\r\n        this.drawVerticalLine(ctx, x, y - length / 2, length);\r\n      },\r\n      tempdraw: function(title) {\r\n        console.log('drawing template');\r\n        let canvas = this.$refs.area;\r\n        let ctx = canvas.getContext('2d');\r\n        let width = canvas.width;\r\n        let height = canvas.height;\r\n        let radius = width * part;\r\n        console.log(`canvas: (${width}:${height})`);\r\n\r\n        const fontName = 'sans-serif';\r\n        const textSize = width / 38;\r\n        ctx.font = `${textSize}px ${fontName}`;\r\n\r\n        console.log('clearing canvas');\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        console.log('drawing working area');\r\n        this.drawArea(canvas, ctx, width / 2, height / 2, radius);\r\n\r\n        console.log('drawing coordinate lines');\r\n        this.drawLines(ctx, width / 2, height / 2, width);\r\n\r\n        console.log('drawing direction arrows');\r\n        this.drawSignedArrows(ctx, width / 2, height / 2, radius / 20);\r\n\r\n        console.log('drawing notches');\r\n\r\n        console.log('drawing horizontal notches');\r\n        this.drawSignedHorizontalNotch(ctx, width / 2, height / 2 + radius, radius / 20, '-R');\r\n        this.drawSignedHorizontalNotch(ctx, width / 2, height / 2 + radius / 2, radius / 20, '-R/2');\r\n        this.drawSignedHorizontalNotch(ctx, width / 2, height / 2 - radius / 2, radius / 20, 'R/2');\r\n        this.drawSignedHorizontalNotch(ctx, width / 2, height / 2 - radius, radius / 20, 'R');\r\n\r\n        console.log('drawing vertical notches');\r\n        this.drawSignedVerticalNotch(ctx, width / 2 - radius, height / 2, radius / 20, '-R');\r\n        this.drawSignedVerticalNotch(ctx, width / 2 - radius / 2, height / 2, radius / 20, '-R/2');\r\n        this.drawSignedVerticalNotch(ctx, width / 2 + radius / 2, height / 2, radius / 20, 'R/2');\r\n        this.drawSignedVerticalNotch(ctx, width / 2 + radius, height / 2, radius / 20, 'R');\r\n\r\n        console.log('template drew');\r\n\r\n      },\r\n      basedraw: function(title) {\r\n        console.log('drawing with real radius');\r\n        let canvas = this.$refs.area;\r\n        let ctx = canvas.getContext('2d');\r\n        let width = canvas.width;\r\n        let height = canvas.height;\r\n        let radius = width * part;\r\n\r\n        console.log(`canvas: (${width}:${height})`);\r\n\r\n        const fontName = 'sans-serif';\r\n        const textSize = width / 38;\r\n        ctx.font = `${textSize}px ${fontName}`;\r\n\r\n        console.log('clearing canvas');\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        console.log('drawing working area');\r\n        this.drawArea(canvas, ctx, width / 2, height / 2, title * radius / maxRadius);\r\n\r\n        console.log('drawing coordinate lines');\r\n        this.drawLines(ctx, width / 2, height / 2, width);\r\n\r\n        console.log('drawing direction arrows');\r\n        this.drawSignedArrows(ctx, width / 2, height / 2, radius / 20);\r\n\r\n        console.log('drawing notches');\r\n\r\n        console.log('drawing horizontal notches');\r\n        for (let i = -4; i <= 4; i += 0.5) {\r\n          let start = height / 2 + radius;\r\n          let step = 2 * radius / 8;\r\n          if (i === 0)\r\n            continue;\r\n          this.drawSignedHorizontalNotch(ctx, width / 2, start - (maxRadius + i) * step, radius / 20, i + '');\r\n        }\r\n\r\n        console.log('drawing vertical notches');\r\n        for (let i = -4; i <= 4; i += 0.5) {\r\n          let start = width / 2 - radius;\r\n          let step = 2 * radius / 8;\r\n          this.drawSignedVerticalNotch(ctx, start + (maxRadius + i) * step, height / 2, radius / 20, i + '');\r\n        }\r\n\r\n        console.log('basic drew');\r\n      },\r\n      redraw: function(radius) {\r\n        if (!radius || radius <= 0)\r\n          this.tempdraw('R');\r\n        else this.basedraw(radius);\r\n      },\r\n\r\n      testX: function(value) {\r\n        console.log(`x values: ${this.xValues}`);\r\n        return this.xValues.includes(value);\r\n      },\r\n\r\n      testY: function(value) {\r\n        const floatRegex = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\r\n        let float = parseFloat(value);\r\n        console.log(`parsed value: ${float}`);\r\n        const isFloat = floatRegex.test(value);\r\n        console.log(`float?: ${isFloat}`);\r\n        console.log(`not NaN?: ${!isNaN(float)}`);\r\n        const isLess = (float <= this.yMaximum - Number.EPSILON);\r\n        console.log(`less?: ${isLess}`);\r\n        const isMore = (float >= this.yMinimal + Number.EPSILON);\r\n        console.log(`more?: ${isMore}`);\r\n        return isFloat && !isNaN(float) && isLess && isMore;\r\n      },\r\n\r\n      testR: function(value) {\r\n        console.log(`r values: ${this.rValues}`);\r\n        return this.rValues.includes(value);\r\n      },\r\n\r\n      fetchToken: async function(repeat, ...args) {\r\n        console.log(`current access-token expired: ${this.accessToken}`);\r\n        console.log('fetching new one');\r\n\r\n        let response = await fetch(\"/api/refresh/token\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n          },\r\n          body: JSON.stringify(this.refreshToken),\r\n        });\r\n\r\n        console.log('check if response is ok');\r\n        if (response.ok) {\r\n\r\n          console.log('successful fetching new tokens');\r\n          console.log('getting json object');\r\n          let json = response.json();\r\n          if (!json) {\r\n\r\n            console.log(`fetched from backend ${ json }`);\r\n            let refreshToken = json.refreshToken;\r\n            console.log(`get refresh token: ${ refreshToken }`);\r\n            let accessToken = json.accessToken;\r\n            console.log(`get access token: ${ accessToken }`);\r\n            this.$emit('update:refreshToken', refreshToken);\r\n            this.$emit('update:accessToken', accessToken);\r\n            repeat = repeat.bind(this);\r\n            repeat(args);\r\n\r\n          } else console.log('empty response body');\r\n\r\n        } else console.log('bad response');\r\n      },\r\n\r\n      fetchResult: async function() {\r\n        console.log('provided valid data');\r\n        console.log(`sending ${this.result}`);\r\n        console.log('sending data...');\r\n\r\n        let response = await fetch(\"/main/app/add\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json;charset=utf-8',\r\n            'shell_token': this.accessToken,\r\n          },\r\n          body: JSON.stringify(this.result)\r\n        });\r\n\r\n        console.log('request sent checking if response is ok (201)');\r\n        if (response.status === 201)\r\n          console.log('response is ok (201)');\r\n        else if (response.status === 403) {\r\n          console.log('access token expired');\r\n          this.fetchToken(this.fetchResult);\r\n        } else\r\n          console.log('bad response');\r\n        console.log(`response status: ${response.status}`);\r\n      },\r\n\r\n      drawDots: function(results) {\r\n        console.log(`${ results }`);\r\n        if (!results.length)\r\n          console.log('no any results in the table');\r\n        else {\r\n          this.result.r = results[0].r;\r\n          const out = 5;\r\n          let canvas = this.$refs.area;\r\n          let ctx = canvas.getContext('2d');\r\n          let width = canvas.width;\r\n          let height = canvas.height;\r\n          for (let i = 0; i < results.length; ++i) {\r\n            console.log(`putting dot: ${results[i]}`);\r\n            console.log(`x: ${ results[i].x }; y: ${ results[i].y }`);\r\n            ctx.fillSyle = results[i].hit? \"#000000\" : \"#cd0000\";\r\n            console.log('translating coordinates');\r\n            const realX = this.translateFrom(results[i].x, width, maxRadius, part);\r\n            const realY = this.translateFrom(-results[i].y, height, maxRadius,part);\r\n            console.log(`translated: x: ${ realX } y: ${ realY }`);\r\n\r\n            console.log('putting dots');\r\n            ctx.beginPath();\r\n            ctx.arc(realX, realY, maxRadius, 0, 2*Math.PI, true);\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n        }\r\n      },\r\n\r\n      check: async function(event) {\r\n        let errorMsg = '';\r\n        console.log('--- x testing ---');\r\n        if (!this.testX(this.result.x))\r\n          errorMsg += this.$refs.x.title + ';\\n';\r\n        console.log('--- y testing ---');\r\n        if (!this.testY(this.result.y))\r\n          errorMsg += this.$refs.y.title + ';\\n';\r\n        console.log('--- r testing ---');\r\n        if (!this.testR(this.result.r))\r\n          errorMsg += this.$refs.r.title + ';\\n';\r\n\r\n        console.log('=== total testing ===');\r\n        if (errorMsg.length) {\r\n          console.log(`Errors[${errorMsg.length}]: ${errorMsg}`);\r\n          alert(errorMsg);\r\n        } else {\r\n          console.log('fetching new result');\r\n          this.fetchResult();\r\n        }\r\n      },\r\n\r\n      checkArea: async function(event) {\r\n        console.log(`current radius: ${this.result.r }`);\r\n        console.log('check if radius set');\r\n        if (!this.result.r) {\r\n          console.log('radius not set');\r\n          alert('Не установлено свойство радиуса области');\r\n        }\r\n        else if (!this.testR(this.result.r)) {\r\n          console.log('invalid radius value');\r\n          alert(this.$refs.r.title);\r\n        }\r\n        else {\r\n          console.log('valid radius value');\r\n          let area = this.$refs.area;\r\n          const rect = area.getBoundingClientRect();\r\n          console.log(`canvas: (${area.width}:${area.height})`);\r\n\r\n          console.log('getting x coordinate');\r\n          const realX = event.clientX - rect.left;\r\n          console.log(`mouse x: ${ realX }`);\r\n\r\n          console.log('translating to x value');\r\n          const x = this.translateTo(realX, area.width, maxRadius, part);\r\n          console.log(`x translated to: ${ x }`);\r\n          this.result.x = x;\r\n\r\n          console.log('getting y coordinate');\r\n          const realY = event.clientY - rect.top;\r\n          console.log(`mouse y: ${ realY }`);\r\n\r\n          console.log('translating to y value');\r\n          const y = this.translateTo(realY, area.height, maxRadius, part);\r\n          console.log(`y translated to: ${ y }`);\r\n          this.result.y = y;\r\n\r\n          console.log('fetching new result');\r\n          this.fetchResult();\r\n        }\r\n      },\r\n\r\n      signout: function(event) {\r\n        console.log('close current session...');\r\n        this.$emit('update:accessToken', '');\r\n        this.$emit('update:refreshToken', '')\r\n      },\r\n\r\n      retrieve: async function() {\r\n        console.log('getting results with unique token');\r\n\r\n        let response = await fetch(\"/main/app/dots/all\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json;charset=utf-8',\r\n            'shell_token': this.accessToken,\r\n          },\r\n          body: JSON.stringify(this.accessToken)\r\n        });\r\n\r\n        console.log('check if response is ok');\r\n        if (response.ok) {\r\n          console.log('response is ok');\r\n          console.log('getting the json object');\r\n          let json = response.json();\r\n          this.results = json;\r\n        } else if (response.status === 403) {\r\n          console.log('access token expired');\r\n          this.fetchToken(this.retrieve)\r\n        } else {\r\n          console.log('bad response');\r\n          console.log(`response status: ${response.status}`);\r\n          this.results = [ { date: new Date(), time: 0, x: 4, y: 4, r: 4, hit: true }];\r\n        }\r\n        this.isLoading = false;\r\n      },\r\n    },\r\n    mounted() {\r\n      this.retrieve();\r\n      this.redraw(this.radius);\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  @import url('https://fonts.googleapis.com/css2?family=Lato&display=swap');\r\n\r\n  #basic {\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  #area {\r\n    width: 90%;\r\n    height: auto;\r\n  }\r\n\r\n  #container {\r\n    display: block;\r\n  }\r\n\r\n  #area-container {\r\n    display: block;\r\n    width: 45%;\r\n    margin: 2% auto;\r\n    text-align: center;\r\n  }\r\n\r\n  #form-container {\r\n    display: block;\r\n    width: 45%;\r\n    margin: 2% auto;\r\n  }\r\n\r\n  .btn {\r\n    border: 0;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    letter-spacing: .5px;\r\n    margin: 2% 2%;\r\n    padding: 11px 30px;\r\n    background-color: #3e606f;\r\n    color: #eaeaea;\r\n    font-family: Lato, Roboto, \"Open Sans\", Helvetica, sans-serif;\r\n    text-transform: capitalize;\r\n    font-size: 12px;\r\n  }\r\n\r\n  .btn:hover {\r\n    background-color: #5e808f;\r\n  }\r\n\r\n  #area-container {\r\n    border: 1px solid #c6c9cc;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  #form-container {\r\n  }\r\n\r\n  #result input, select {\r\n    border: 1px solid #c6c9cc;\r\n    border-radius: 5px;\r\n    color: #555;\r\n    display: block;\r\n    margin: 1% 0 4% 0;\r\n    padding: 1% 2%;\r\n  }\r\n\r\n  .separated {\r\n    text-align: center;\r\n  }\r\n\r\n\r\n  #close-container {\r\n    text-align: center;\r\n  }\r\n\r\n  #result label {\r\n    color: #3e606f;\r\n    font-family: Lato, Roboto, \"Open Sans\", Helvetica, sans-serif;\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  #result fieldset {\r\n    border: 1px solid #c6c9cc;\r\n    border-radius: 5px;\r\n    margin: 2% 0;\r\n  }\r\n\r\n  .text__title {\r\n    font-size: 16px;\r\n    line-height: 44px;\r\n    color: #3e606f;\r\n    margin: 0;\r\n    font-family: Lato, Roboto, \"Open Sans\", Helvetica, sans-serif;\r\n  }\r\n\r\n  .empty-results {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    line-height: 44px;\r\n    color: #3e606f;\r\n    margin: 0;\r\n    font-family: Lato, Roboto, \"Open Sans\", Helvetica, sans-serif;\r\n  }\r\n\r\n  @media only all and (min-width: 1245px) {\r\n  }\r\n\r\n  @media only all and (min-width: 643px) and (max-width: 1244px) {\r\n\r\n    .text__title {\r\n      font-size: 18px;\r\n      line-height: 32px;\r\n    }\r\n\r\n    .btn {\r\n      font-size: 14px;\r\n    }\r\n\r\n    .empty-results {\r\n      font-size: 18px;\r\n      line-height: 32px;\r\n    }\r\n  }\r\n\r\n  @media only all and (max-width: 642px) {\r\n    #result {\r\n      display: block;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .empty-results {\r\n      font-size: 12;\r\n      line-height: 22px;\r\n    }\r\n  }\r\n</style>"],"sourceRoot":"src/components"}]}