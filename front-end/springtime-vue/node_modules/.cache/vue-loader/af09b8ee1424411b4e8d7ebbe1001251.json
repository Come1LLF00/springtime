{"remainingRequest":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\src\\components\\basic.vue?vue&type=template&id=120cd94e&","dependencies":[{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\src\\components\\basic.vue","mtime":1606788065823},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Fun\\itmo_labs\\c2\\web\\springtime\\front-end\\springtime-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}